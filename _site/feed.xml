<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.3">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-08-03T23:23:50-04:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Being Frank.</title><subtitle>Life, Tech, and Happiness</subtitle><author><name>Frank Cao</name></author><entry><title type="html">Uploading to AWS S3 Bucket from Python file</title><link href="http://localhost:4000/tech/2021/02/07/upload_python_to_s3.html" rel="alternate" type="text/html" title="Uploading to AWS S3 Bucket from Python file" /><published>2021-02-07T12:09:42-05:00</published><updated>2021-02-07T12:09:42-05:00</updated><id>http://localhost:4000/tech/2021/02/07/upload_python_to_s3</id><content type="html" xml:base="http://localhost:4000/tech/2021/02/07/upload_python_to_s3.html"><![CDATA[<p><a class="top-link hide" href="" id="js-top">
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 12 6"><path d="M12 6H0l6-6z"></path></svg>
      <span class="screen-reader-text">Back to top</span>
      </a></p>

<!--
<script src="https://gist.github.com/franktcao/0683211eaf86f419dc8ea2f0eb85960c.js"></script>
-->

<h1 id="intro">Intro</h1>
<p>After realizing that files generated by <code class="language-plaintext highlighter-rouge">heroku</code> apps are temporary (<em>duh</em>), 
there was a need to get those files on something more persistent – ideally a 
programmatic way with <code class="language-plaintext highlighter-rouge">python</code>.</p>

<p>Fortunately, there are many cloud storage options to consider: <code class="language-plaintext highlighter-rouge">AWS</code>, <code class="language-plaintext highlighter-rouge">GCP</code>, etc.</p>

<p>For this tutorial, <code class="language-plaintext highlighter-rouge">AWS</code> <code class="language-plaintext highlighter-rouge">S3</code> was chosen, using the <code class="language-plaintext highlighter-rouge">boto3</code> <code class="language-plaintext highlighter-rouge">python</code> package to set up 
an <code class="language-plaintext highlighter-rouge">S3</code> client and upload to a bucket.</p>

<h1 id="setup">Setup</h1>
<h2 id="create-aws-account">Create AWS account</h2>
<p>To upload to an AWS S3 bucket, you’ll need to sign up for an AWS account! Get one here:
<a href="https://aws.amazon.com/">https://aws.amazon.com/</a></p>

<h2 id="requirements">Requirements</h2>
<p>First, you’ll need to add these to your <code class="language-plaintext highlighter-rouge">requirements.txt</code> (As always, I suggest 
working in a 
<a href="https://franktcao.github.io/tech/2020/07/27/setting_up.html">virtual environment</a>):</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>awscli==1.19.3
boto3==1.17.3
botocore==1.20.3
</code></pre></div></div>
<p>Note, the pinned versions, likely to be outdated by the time you read this, are just 
to show a current working combination of requirements (of course, you can leave 
these unpinned if you so choose).</p>

<h2 id="credentials">Credentials</h2>
<p>In order to know if an upload is coming from a legitimate source, credentials need
to be set up. Let’s start by creating, getting, and setting your AWS credentials.</p>

<h3 id="create-and-get-access-keys">Create and Get Access Keys</h3>
<p>Sign in to your AWS and go to your account’s <code class="language-plaintext highlighter-rouge">Security Credentials</code> (in the top right
taskbar, navigate through <code class="language-plaintext highlighter-rouge">My Acccount</code> -&gt; <code class="language-plaintext highlighter-rouge">Security Credentials</code>).</p>

<div style="text-align: center;">
    <img src="/img/posts/upload_python_to_s3/security_credentials.png" width="80%" alt="Security credentials" />
</div>

<p>Click the <code class="language-plaintext highlighter-rouge">Access keys (access key ID and secret access key)</code> section to expand it.</p>

<p>Click the blue <code class="language-plaintext highlighter-rouge">Create New Access Key</code> button. Your key ID and secret have been
generated. Download it and save it to somewhere secure; keep for your records.</p>

<div style="text-align: center;">
    <img src="/img/posts/upload_python_to_s3/create_key.png" width="50%" alt="Create security keys" />
</div>

<p><br /></p>

<h3 id="set-access-keys">Set Access Keys</h3>
<p>There are several ways <code class="language-plaintext highlighter-rouge">boto3</code> but the most secure ways to do so are to store your
credentials as environment variables or to add them to your config file (you can
read all of it in the
<a href="https://boto3.amazonaws.com/v1/documentation/api/latest/guide/credentials.html">docs</a>.
I find the most straightforward way is to store them in a config file.</p>

<h4 id="add-credentials-to-config-file">Add credentials to config file</h4>
<p>If it doesn’t exist already, create a config file named <code class="language-plaintext highlighter-rouge">~/.aws/config</code> and add your
credentials there:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>default]
<span class="nv">aws_access_key_id</span><span class="o">=</span>YOUR_ACCESS_KEY_ID
<span class="nv">aws_secret_access_key</span><span class="o">=</span>YOUR_SECRET_ACCESS_KEY
</code></pre></div></div>

<p>where <code class="language-plaintext highlighter-rouge">YOUR_ACCESS_KEY_ID</code> and <code class="language-plaintext highlighter-rouge">YOUR_SECRETE_ACCESS_KEY</code> are those values you just 
created. They should respectively look something like:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>AKMAJZBQRYWJX71XMPZA
</code></pre></div></div>
<p>and</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>SOiQJImr8c5mxX1VDJssCew0M0kpMsMnS/ypCrl1
</code></pre></div></div>
<p>(Don’t worry, these are fake).</p>

<p>These credentials will be used by default for any <code class="language-plaintext highlighter-rouge">boto3</code> and/or AWS CLI calls. If
you have different credentials for different profiles, you can add them to the same
config file but just a different section names (e.g. <code class="language-plaintext highlighter-rouge">[default]</code> -&gt; <code class="language-plaintext highlighter-rouge">[profile dev]</code>.
Note, <code class="language-plaintext highlighter-rouge">profile</code> is required in there. Consult the docs for more information).</p>

<h2 id="create-s3-bucket">Create S3 Bucket</h2>
<p>Log onto your S3 AWS console: 
<a href="https://s3.console.aws.amazon.com/">https://s3.console.aws.amazon.com/</a>
and click the <code class="language-plaintext highlighter-rouge">Create Bucket</code> button. Give the bucket a unique name, select an 
appropriate <code class="language-plaintext highlighter-rouge">Region</code>, and configure the bucket to your liking.</p>
<div style="text-align: center;">
    <img src="/img/posts/upload_python_to_s3/create_bucket.png" width="100%" alt="Create 
security keys" />
</div>

<p>Click the <code class="language-plaintext highlighter-rouge">Create bucket</code> button at the very bottom of the page to create it. This 
will create the bucket and redirect you to the console where you should now see the 
bucket.</p>

<div style="text-align: center;">
    <img src="/img/posts/upload_python_to_s3/buckets.png" width="80%" alt="Create 
security keys" />
</div>

<p>Now, you’re ready to go!</p>

<h1 id="example-usage">Example Usage</h1>
<h2 id="python-function">Python Function</h2>
<p>The provided function, from the 
<a href="https://boto3.amazonaws.com/v1/documentation/api/latest/guide/s3-uploading-files.html"><code class="language-plaintext highlighter-rouge">Boto3</code> docs</a>,
is well documented but here the function is renamed to distinguish from possibly 
uploading to other services:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">boto3</span>
<span class="kn">import</span> <span class="n">logging</span>
<span class="kn">from</span> <span class="n">botocore.exceptions</span> <span class="kn">import</span> <span class="n">ClientError</span>
<span class="kn">from</span> <span class="n">typing</span> <span class="kn">import</span> <span class="n">Optional</span>


<span class="k">def</span> <span class="nf">upload_to_s3</span><span class="p">(</span>
    <span class="n">file_name</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>
    <span class="n">bucket</span><span class="p">:</span> <span class="nb">str</span><span class="p">,</span>
    <span class="n">object_name</span><span class="p">:</span> <span class="n">Optional</span><span class="p">[</span><span class="nb">str</span><span class="p">]</span> <span class="o">=</span> <span class="bp">None</span>
<span class="p">)</span> <span class="o">-&gt;</span> <span class="nb">bool</span><span class="p">:</span>
    <span class="sh">"""</span><span class="s">Upload a file to an S3 bucket.

    :param file_name: File to upload
    :param bucket: Bucket to upload to
    :param object_name: S3 object name. If not specified then file_name is used
    :return: True if file was uploaded, else False
    </span><span class="sh">"""</span>

    <span class="c1"># If S3 object_name was not specified, use file_name
</span>    <span class="k">if</span> <span class="n">object_name</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">object_name</span> <span class="o">=</span> <span class="n">file_name</span>

    <span class="c1"># Upload the file
</span>    <span class="n">s3_client</span> <span class="o">=</span> <span class="n">boto3</span><span class="p">.</span><span class="nf">client</span><span class="p">(</span><span class="sh">"</span><span class="s">s3</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">s3_client</span><span class="p">.</span><span class="nf">upload_file</span><span class="p">(</span><span class="n">file_name</span><span class="p">,</span> <span class="n">bucket</span><span class="p">,</span> <span class="n">object_name</span><span class="p">)</span>
    <span class="k">except</span> <span class="n">ClientError</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
        <span class="n">logging</span><span class="p">.</span><span class="nf">error</span><span class="p">(</span><span class="n">e</span><span class="p">)</span>
        <span class="k">return</span> <span class="bp">False</span>
    <span class="k">return</span> <span class="bp">True</span>
</code></pre></div></div>

<h2 id="try-it-out-for-yourself">Try it out for yourself!</h2>
<h3 id="option-1-jupyter-notebooklab">Option 1: Jupyter Notebook/Lab</h3>
<p>Make sure your workspace/working directory has the file you want to upload somewhere 
in it.</p>

<p>Run <code class="language-plaintext highlighter-rouge">jupyter</code> <code class="language-plaintext highlighter-rouge">notebook</code> or <code class="language-plaintext highlighter-rouge">lab</code> (I personally prefer <code class="language-plaintext highlighter-rouge">lab</code> since you can have 
<code class="language-plaintext highlighter-rouge">vim</code> keybindings but that might take some additional steps to set up):</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>jupyter notebook
</code></pre></div></div>
<p>Copy the function and imports into a cell and run it. Add a cell with</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">FULL_PATH_TO_FILE</span> <span class="o">=</span> <span class="sh">"</span><span class="s">some/path/to/file.ext</span><span class="sh">"</span>
<span class="n">YOUR_BUCKET_NAME</span> <span class="o">=</span> <span class="sh">"</span><span class="s">my-superb-bucket</span><span class="sh">"</span>
<span class="n">YOUR_OBJECT_NAME</span> <span class="o">=</span> <span class="sh">"</span><span class="s">my_test_file.ext</span><span class="sh">"</span>
<span class="n">success</span> <span class="o">=</span> <span class="nf">upload_to_s3</span><span class="p">(</span>
    <span class="n">file_name</span><span class="o">=</span><span class="n">FULL_PATH_TO_FILE</span><span class="p">,</span> 
    <span class="n">bucket</span><span class="o">=</span><span class="n">YOUR_BUCKET_NAME</span><span class="p">,</span> 
    <span class="n">object_name</span><span class="o">=</span><span class="n">YOUR_OBJECT_NAME</span>
<span class="p">)</span>
<span class="k">if</span> <span class="n">success</span><span class="p">:</span>
    <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Successfully uploaded </span><span class="sh">'</span><span class="si">{</span><span class="n">YOUR_OBJECT_NAME</span><span class="si">}</span><span class="sh">'</span><span class="s"> to </span><span class="sh">'</span><span class="si">{</span><span class="n">YOUR_BUCKET_NAME</span><span class="si">}</span><span class="sh">'</span><span class="s">!</span><span class="sh">"</span><span class="p">)</span>
<span class="k">else</span><span class="p">:</span>
    <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Failed to upload.</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>
<p>Run the cell, and you should have your file successfully uploaded! Check your S3 
console to make sure:
<a href="https://s3.console.aws.amazon.com/">https://s3.console.aws.amazon.com/</a></p>

<h3 id="option-2-setup-for-bigger-project">Option 2: Setup for Bigger Project</h3>
<p>Let’s save function above in a file with utilities: <code class="language-plaintext highlighter-rouge">utils.py</code>
Then create a file <code class="language-plaintext highlighter-rouge">upload_file.py</code> and add this to its contents:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="n">.utils.py</span> <span class="kn">import</span> <span class="n">upload_to_s3</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="sh">"</span><span class="s">__main__</span><span class="sh">"</span><span class="p">:</span>
    <span class="n">FULL_PATH_TO_FILE</span> <span class="o">=</span> <span class="sh">"</span><span class="s">some/path/to/file.ext</span><span class="sh">"</span>
    <span class="n">YOUR_BUCKET_NAME</span> <span class="o">=</span> <span class="sh">"</span><span class="s">my-superb-bucket</span><span class="sh">"</span>
    <span class="n">YOUR_OBJECT_NAME</span> <span class="o">=</span> <span class="sh">"</span><span class="s">my_test_file.ext</span><span class="sh">"</span>
    <span class="n">success</span> <span class="o">=</span> <span class="nf">upload_to_s3</span><span class="p">(</span>
        <span class="n">file_name</span><span class="o">=</span><span class="n">FULL_PATH_TO_FILE</span><span class="p">,</span>
        <span class="n">bucket</span><span class="o">=</span><span class="n">YOUR_BUCKET_NAME</span><span class="p">,</span>
        <span class="n">object_name</span><span class="o">=</span><span class="n">YOUR_OBJECT_NAME</span>
    <span class="p">)</span>
    <span class="k">if</span> <span class="n">success</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="sa">f</span><span class="sh">"</span><span class="s">Successfully uploaded </span><span class="sh">'</span><span class="si">{</span><span class="n">YOUR_OBJECT_NAME</span><span class="si">}</span><span class="sh">'</span><span class="s"> to </span><span class="sh">'</span><span class="si">{</span><span class="n">YOUR_BUCKET_NAME</span><span class="si">}</span><span class="sh">'</span><span class="s">!</span><span class="sh">"</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="nf">print</span><span class="p">(</span><span class="sh">"</span><span class="s">Failed to upload.</span><span class="sh">"</span><span class="p">)</span>
</code></pre></div></div>
<p>You can use the <code class="language-plaintext highlighter-rouge">argparse</code> package to make it more customizable and more of a 
command-line interface (CLI) tool.</p>

<p>Finally, you can run it in the command line:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">&gt;&gt;&gt;</span> python <span class="nt">-m</span> upload_file
Sucessfully uploaded <span class="s1">'my_test_file.ext'</span> to <span class="s1">'my-superb-bucket'</span><span class="o">!</span>
</code></pre></div></div>

<h1 id="conclusion">Conclusion</h1>
<p>There you have it! Now you can programmatically upload whatever files you have 
locally <em>or</em> whatever files your <code class="language-plaintext highlighter-rouge">heroku</code> app generates on its servers!</p>]]></content><author><name>Frank Cao</name></author><category term="tech" /><category term="tech" /><category term="web-app" /><category term="bucket" /><category term="s3" /><category term="aws" /><summary type="html"><![CDATA[Upload to an AWS S3 bucket with a python function.]]></summary></entry><entry><title type="html">Setting Up</title><link href="http://localhost:4000/tech/2020/07/27/setting_up.html" rel="alternate" type="text/html" title="Setting Up" /><published>2020-07-27T17:34:58-04:00</published><updated>2020-07-27T17:34:58-04:00</updated><id>http://localhost:4000/tech/2020/07/27/setting_up</id><content type="html" xml:base="http://localhost:4000/tech/2020/07/27/setting_up.html"><![CDATA[<p><a class="top-link hide" href="" id="js-top">
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 12 6"><path d="M12 6H0l6-6z"></path></svg>
      <span class="screen-reader-text">Back to top</span>
      </a></p>

<!--
<script src="https://gist.github.com/franktcao/0683211eaf86f419dc8ea2f0eb85960c.js"></script>
-->

<h1 id="intro">Intro</h1>
<p>So you want to develop python projects on your McBook? You’ll want:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">homebrew</code> to easily install needed packages on your laptop</li>
  <li>a <code class="language-plaintext highlighter-rouge">python</code> version manager (<code class="language-plaintext highlighter-rouge">pyenv</code>) to work on different projects requiring
 different versions of <code class="language-plaintext highlighter-rouge">python</code></li>
  <li>to set up a clean environment (<code class="language-plaintext highlighter-rouge">venv</code>), independent of how your system
 is set up, to develop on</li>
</ul>

<h1 id="homebrew">Homebrew</h1>

<p>Homebrew is a package manager to</p>
<blockquote>
  <blockquote>
    <p>install stuff you need that Apple didn’t.</p>
  </blockquote>
</blockquote>

<p>Start by getting <code class="language-plaintext highlighter-rouge">homebrew</code> (see <a href="https://brew.sh/">homebrew website</a>).</p>

<h1 id="pyenv"><code class="language-plaintext highlighter-rouge">pyenv</code></h1>

<p><code class="language-plaintext highlighter-rouge">pyenv</code> is a <code class="language-plaintext highlighter-rouge">python</code> version manager that allows you to easily switch between
different versions of <code class="language-plaintext highlighter-rouge">python</code> to develop different projects requiring different
 versions of <code class="language-plaintext highlighter-rouge">python</code>.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>brew <span class="nb">install </span>pyenv
</code></pre></div></div>

<p>With Mac OSX, your shell is likely <code class="language-plaintext highlighter-rouge">zsh</code> so you’d need to also run (update: the correct 
use of <code class="language-plaintext highlighter-rouge">$PYENV_ROOT/shims</code> is used instead of the previously written <code class="language-plaintext highlighter-rouge">$PYENV_ROOT/bin</code>)</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">echo</span> <span class="s1">'export PYENV_ROOT="$HOME/.pyenv"'</span> <span class="o">&gt;&gt;</span> ~/.zshrc
<span class="nb">echo</span> <span class="s1">'export PATH="$PYENV_ROOT/shims:$PATH"'</span> <span class="o">&gt;&gt;</span> ~/.zshrc
<span class="nb">echo</span> <span class="nt">-e</span> <span class="s1">'if command -v pyenv 1&gt;/dev/null 2&gt;&amp;1; then\n  eval "$(pyenv init -)"\nfi'</span> <span class="o">&gt;&gt;</span> ~/.zshrc
</code></pre></div></div>

<p>For more details, see <a href="https://github.com/pyenv/pyenv#Installation">pyenv’s github</a>.</p>

<h2 id="check-to-see-that-its-working">Check to see that it’s working</h2>

<p>Now that <code class="language-plaintext highlighter-rouge">pyenv</code> is installed, check to see which <code class="language-plaintext highlighter-rouge">python</code> your system is pointing to:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>which python  <span class="c"># Default: /usr/local/bin/python</span>
python <span class="nt">--version</span>  <span class="c"># Default: Python 2.7.3</span>
</code></pre></div></div>

<p>To check which versions <code class="language-plaintext highlighter-rouge">python</code> your <code class="language-plaintext highlighter-rouge">python</code> version manager, <code class="language-plaintext highlighter-rouge">pyenv</code>,
has installed and which is active locally or globally:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pyenv versions
pyenv global
pyenv <span class="nb">local</span>
</code></pre></div></div>

<p>Install the latest version of <code class="language-plaintext highlighter-rouge">python</code> (at the moment: <code class="language-plaintext highlighter-rouge">python 3.8.5</code>) as a shim in
 <code class="language-plaintext highlighter-rouge">pyenv</code>.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">PYTHON_VERSION</span><span class="o">=</span>3.8.5
<span class="c"># Install shim</span>
pyenv <span class="nb">install</span> <span class="nv">$PYTHON_VERSION</span>
<span class="c"># Set default version on your system</span>
pyenv global <span class="nv">$PYTHON_VERSION</span>
<span class="c"># Set the version for your project (current working directory)</span>
pyenv <span class="nb">local</span> <span class="nv">$PYTHON_VERSION</span>
</code></pre></div></div>

<p>Check to make sure your system is pointing to the correct shims:</p>

<div class="language-zsh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>which python  <span class="c"># /Users/YOURUSERNAME/.pyenv/shims/python</span>
python <span class="nt">--version</span>  <span class="c"># Python 3.8.5</span>
</code></pre></div></div>

<h2 id="setting-up-venv-virtual-environment">Setting Up <code class="language-plaintext highlighter-rouge">venv</code> (Virtual Environment)</h2>
<p>With python versions sorted out, you’ll want to develop on a “clean” system that is
independent on how you’ve actually configured your laptop.</p>

<p>The two main options are:</p>
<ul>
  <li>Virtual Environment</li>
  <li>Docker Image</li>
</ul>

<p>Here, we’ll use a python virtual environment, <code class="language-plaintext highlighter-rouge">venv</code>. In your project directory
, create and activate your virtual environment with <code class="language-plaintext highlighter-rouge">venv</code>:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">VENV</span><span class="o">=</span><span class="s1">'.venv'</span>
python <span class="nt">-m</span> venv <span class="nv">$VENV</span>
<span class="nb">.</span> <span class="nv">$VENV</span>/bin/activate
</code></pre></div></div>

<p>You’ll know it’s working if <code class="language-plaintext highlighter-rouge">(.venv)</code> is added to the beginning your <code class="language-plaintext highlighter-rouge">PS1</code> prompt.</p>

<p>Now you can add python packages to your project and not worry about different
versions that you’ve installed on your computer. Just <code class="language-plaintext highlighter-rouge">pip install</code> to update your
virtual environment since it’s activated.</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>pip <span class="nb">install</span> <span class="nt">--upgrade</span> pip
pip <span class="nb">install</span> <span class="nt">-r</span> requirements.txt
</code></pre></div></div>

<p>Now you’re ready to start developing!</p>]]></content><author><name>Frank Cao</name></author><category term="tech" /><category term="tech" /><summary type="html"><![CDATA[Setting up a python dev environment for your MacBook]]></summary></entry><entry><title type="html">What Will Make Today Successful for Me?</title><link href="http://localhost:4000/life/2019/10/23/what_makes_today_successful.html" rel="alternate" type="text/html" title="What Will Make Today Successful for Me?" /><published>2019-10-23T18:36:05-04:00</published><updated>2019-10-23T18:36:05-04:00</updated><id>http://localhost:4000/life/2019/10/23/what_makes_today_successful</id><content type="html" xml:base="http://localhost:4000/life/2019/10/23/what_makes_today_successful.html"><![CDATA[<p><a class="top-link hide" href="" id="js-top">
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 12 6"><path d="M12 6H0l6-6z"></path></svg>
      <span class="screen-reader-text">Back to top</span>
      </a></p>

<!--
<script src="https://gist.github.com/franktcao/0683211eaf86f419dc8ea2f0eb85960c.js"></script>
-->

<h2 id="ramble">Ramble</h2>

<p>So it’s happened: I am right now that guy writing his blog at [<em>Insert Your Favorite Coffee Spot</em>]. I’m becoming more comfortable with that. I’m also becoming more comfortable with the idea of writing things less formally and more in the stream of consciousness style. I’m letting go of some of my perfectionism that’s kept me back from being productive because at the end of the day, who’s going to read this – who cares, right? And no, I don’t mean that in some pessimistic or dismal way. I truly mean that I have been spending so much energy on inconsequential things that just have no relevance or bearing on the bigger picture. I am recognizing that now and I am taking action to be above that.</p>

<p>Well, now that we got the formalities out of the way, let’s get into it!</p>

<h2 id="frustration">Frustration</h2>
<p>So I’ve been feeling frustrated and flustered lately with this job search. It is taxing, it is exhausting, and it really eats at ones self worth a little bit. Yesterday this search, coupled with thinking I was making some headway but sorta realizing I’m not, coupled with a combination of a few things that I won’t get into right now, I was feeling particularly down. And it hit me hard on my subway commute home (aside: I love that I’m back home living in a city again with easily accessible public transit).</p>

<p>This time I decided that instead of letting it all bottle up like I always do, I would reach out and call somebody for help, for guidance, to vent – I don’t know.</p>

<h2 id="help">Help</h2>
<p>I texted a good friend (I’m not sure where I want to be with name-dropping just yet) and asked if she had some time to talk. She said she’d be free in an hour. This was fine and I absolutely understood. I decided to take a nap to sleep it off (it’s not a concussion so I could do that right?).</p>

<p>I woke up about 45 minutes later and honestly felt a little better. I texted her, telling her I was bummed out earlier but the feeling passed.</p>

<p>Before I knew it, <em>she called</em>.</p>

<p>Maybe she sensed something. 
Maybe she knew to not let me take the easy way out and bottle it up anymore. 
Maybe she was concerned.</p>

<h5 id="definitely-shes-a-good-friend-that-cares"><em>Definitely</em> she’s a good friend that cares.</h5>

<p>We talked for a bit about all of the things going on. We got to the root: I am frustrated and overwhelmed with this job search. I know I shouldn’t but I feel a ton of pressure to land a job; there’s this omnipresent expectation of automatically having an amazing career that comes with having a PhD. And to boot, I feel like I’m still at the beginning of this job search – I feel like I’ve gained no traction in the time since I started my search.</p>

<p>There’s just so much to learn: algorithms, more and better python libraries, how to better interview, machine learning techniques, best practices computer vision, best data structures for a given problem, more SQL practice, picking the right project to exhibit my skills, etc.</p>

<p>There’s so much to do: attend meetups, network, cold calls, work on projects, work out, practice coding and whiteboarding interviews, update my blog, etc.</p>

<p>It doesn’t help that I’m a bit scatterbrained lately (chicken or egg?).</p>

<h2 id="advice">Advice</h2>
<p><strong>Then</strong>, she said something to the effect of:</p>
<blockquote>
  <p><em>“Frank , take a deep breath. You’re exactly where you need to be. Whenever you have that feeling, take another deep breath. And once you’ve gathered yourself, ask ‘What will make today successful?’. See what bite-szed, digestible steps you can take to make progress for the hour, for the afternoon, for the day.”</em></p>
</blockquote>

<p>This spoke to me.</p>

<p>I mean I know how to break down a large problem into smaller ones and then those into smaller tasks. However, I was taking a different approach with this job hunt, maybe due to the urgency and panic of trying to land one.</p>

<p>So I took it to heart.</p>

<h2 id="living-it">Living It</h2>
<p>The next day was better – much, much better. I think I was experiencing the day more intently. I dropped some plans and decided to go to a <a href="https://www.meetup.com/bostonpython/">Python meetup</a>. I saw some really cool lightning talks (10 minute limit) on peoples’ side and passion projects. It was such a welcoming environment and I got to talk to the speakers a little bit. There were even recruiters and hiring managers in the crowd! I got a few business cards and talked to some really interesting people who are working at some amazing companies doing some fascinating stuff.</p>

<p>I’ve even <em>re</em>-restructured my calendar. Yes, that’s an extra <em>re</em>. I had the right idea of structuring it similarly to a school schedule but the problem was that I staggered so much in a single day. I felt like I was constantly trying to catch up and shifting time over so I would meet some artificial deadline in these arbitrary time windows. Just looking at my calendar was overwhelming. I now set it up so that I focus on one or two things each day with some flexibility to insert things in each day.</p>

<h2 id="closing-remarks">Closing Remarks</h2>
<p>I’m not claiming that everything’s fixed from a single quote or a change in perspective but things <em>are</em> getting better. I need to ride this high while staying levelheaded.</p>

<h2 id="bonus-remarks">Bonus Remarks</h2>

<p>I reached out to my friend again and asked her for some advice regarding this tradeoff of riding the high while not being swayed too much one way or the other. She alluded to something someone really close to her said… to the effect of (my memory hasn’t been on point lately, y’all):</p>

<blockquote>
  <p><em>‘Allow yourself to feel those highs. Celebrate it. Take some time to really appreciate them. Then, gather yourself and look to figure out the next steps.’</em></p>
</blockquote>

<p>Lol, I swear she’s a real person and not an oracle. She’s just wise beyond her years and have been tremendous help for me lately.</p>

<p>But yeah, next time <em>you</em> experience a win and are in that high, leverage that moment of clarity to set up and attack your next hurdle!</p>]]></content><author><name>Frank Cao</name></author><category term="life" /><category term="personal" /><category term="life" /><summary type="html"><![CDATA[Taking a second to put things into perspective.]]></summary></entry><entry><title type="html">Job Scraping</title><link href="http://localhost:4000/2019/08/29/web_scraping.html" rel="alternate" type="text/html" title="Job Scraping" /><published>2019-08-29T08:44:41-04:00</published><updated>2019-08-29T08:44:41-04:00</updated><id>http://localhost:4000/2019/08/29/web_scraping</id><content type="html" xml:base="http://localhost:4000/2019/08/29/web_scraping.html"><![CDATA[<p><a class="top-link hide" href="" id="js-top">
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 12 6"><path d="M12 6H0l6-6z"></path></svg>
      <span class="screen-reader-text">Back to top</span>
      </a></p>

<!--
<script src="https://gist.github.com/franktcao/0683211eaf86f419dc8ea2f0eb85960c.js"></script>
-->

<p>This job search has been a bit more difficult than originally anticipated. There is a large overlap between what is done in physics and what is done in data science. Unfortunately,
the vocabulary is not quite compatible. So I decided that the best way to showcase my abilities (while keeping them in practice) 
is to scrape job postings to see what is desired in industry.</p>

<p>In this tutorial, we will begin to scrape <code class="language-plaintext highlighter-rouge">indeed.com</code> to compile a list of sought-after keywords that the current market is looking for. The overarching goal of this is to – other than finding a rewarding career that I absolutely love –  do statistical analysis on the vocabulary built out of what’s done here. We will start by using  <code class="language-plaintext highlighter-rouge">BeautifulSoup</code> to parse the search results, load them into <code class="language-plaintext highlighter-rouge">pandas</code>dataframes and saving them to <code class="language-plaintext highlighter-rouge">.csv</code> or <code class="language-plaintext highlighter-rouge">.json</code> files to process in the next tutorial.</p>

<p><strong>Note:</strong> Not all websites are so welcoming to having their data scraped. Sites like glassdoor, linkedin, facebook, and many others that have personal user information are particularly vigilant when it comes to crawlig/scraping. You can check to see which parts are dis/allowed by adding ‘/robots.txt’ to the main URL (e.g. www.linkedin.com/robots.txt).</p>

<p><strong>Note:</strong> The scraper depends on indeed’s website structure which you can parse through by right-clicking anywhere on the website and selecting Inspect (on Chrome, at least). So full discretion, this will <em>not</em> be the most stable way to get job postings from indeed. There is likely a more stable indeed API but I think this is a good exercise in web-scraping which is another important way to gather data. More so, many places will not provide an API to work with.</p>

<p>Let’s get started…</p>

<hr />

<h2 class="no_toc" id="contents">Contents</h2>

<ul id="markdown-toc">
  <li><a href="#1-setting-up" id="markdown-toc-1-setting-up">1. Setting Up</a>    <ul>
      <li><a href="#setting-up-for-success" id="markdown-toc-setting-up-for-success">Setting Up for Success</a></li>
    </ul>
  </li>
  <li><a href="#2-utilizing-beautifulsoup" id="markdown-toc-2-utilizing-beautifulsoup">2. Utilizing <code class="language-plaintext highlighter-rouge">BeautifulSoup</code></a>    <ul>
      <li><a href="#a-understanding-the-url" id="markdown-toc-a-understanding-the-url">a. Understanding the URL</a>        <ul>
          <li><a href="#1-inspecting-indeeds-website" id="markdown-toc-1-inspecting-indeeds-website">1. Inspecting Indeed’s Website</a></li>
          <li><a href="#2-setting-variables" id="markdown-toc-2-setting-variables">2. Setting Variables</a></li>
          <li><a href="#3-packaging-webpage" id="markdown-toc-3-packaging-webpage">3. Packaging Webpage</a></li>
        </ul>
      </li>
      <li><a href="#b-get-entriespostings" id="markdown-toc-b-get-entriespostings">b. Get Entries/Postings</a></li>
      <li><a href="#c-reading-through-a-single-posting" id="markdown-toc-c-reading-through-a-single-posting">c. Reading Through a Single Posting</a></li>
      <li><a href="#d-entry-example" id="markdown-toc-d-entry-example">d. Entry Example</a>        <ul>
          <li><a href="#1-getting-job-location" id="markdown-toc-1-getting-job-location">1. Getting Job Location</a></li>
          <li><a href="#2-getting-the-job-description" id="markdown-toc-2-getting-the-job-description">2. Getting the Job Description</a></li>
          <li><a href="#3-defining-all-methods-needed" id="markdown-toc-3-defining-all-methods-needed">3. Defining All Methods Needed</a></li>
        </ul>
      </li>
    </ul>
  </li>
  <li><a href="#3-putting-it-all-together-full-example" id="markdown-toc-3-putting-it-all-together-full-example">3. Putting it All Together (Full Example)</a>    <ul>
      <li><a href="#a-setting-up" id="markdown-toc-a-setting-up">a. Setting Up</a></li>
      <li><a href="#b-looping-over-postings" id="markdown-toc-b-looping-over-postings">b. Looping Over Postings</a></li>
    </ul>
  </li>
  <li><a href="#4-conclusion" id="markdown-toc-4-conclusion">4. Conclusion</a></li>
  <li><a href="#comments" id="markdown-toc-comments">Comments!</a></li>
</ul>

<hr />

<h1 id="1-setting-up">1. Setting Up</h1>
<!--/*
You can find the notebook to follow along with the [notebook](https://www.github.com/franktcao/job_scraping/scrape_indeed.ipynb) or you can just go directly to the [full repository](https://www.github.com/franktcao/job_scraping/). First you will need to make sure you have the required modules. 
*/ -->
<p>You can follow along</p>
<ul>
  <li>with this <a href="https://colab.research.google.com/github/franktcao/job_scraping/blob/master/scrape_indeed.ipynb" target="\_blank"><u>interactive in-browser notebook</u></a> <sup>*</sup>,</li>
  <li>by downloading the <a href="https://github.com/franktcao/job_scraping/blob/master/scrape_indeed.ipynb" target="\_blank"><u>source</u></a> to work on it locally, or</li>
  <li>by going directly to the <a href="https://www.github.com/franktcao/job_scraping/" target="\_blank"><u>full repository</u></a>.</li>
</ul>

<p><sup>*</sup>The interactive notebook requires a google account to save a copy and run on their servers.</p>

<h2 id="setting-up-for-success">Setting Up for Success</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="n">sys</span>
<span class="kn">import</span> <span class="n">time</span>
<span class="kn">import</span> <span class="n">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">import</span> <span class="n">requests</span>
<span class="kn">from</span> <span class="n">bs4</span> <span class="kn">import</span> <span class="n">BeautifulSoup</span>
</code></pre></div></div>

<p>Below are the modules and why we use them:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">sys</code>: Not really important, just a way to print out a progress bar.</li>
  <li><code class="language-plaintext highlighter-rouge">time</code>: We use this to really get the date so that we have a time stamp on each file we create. This way, if things break in the future, we still have a working example to apply the next stages.</li>
  <li><code class="language-plaintext highlighter-rouge">pandas</code>: If we’re going to be working with a fairly large table of data (memory-limited so if things were much heavier, we’d be querying from a database or some data distribution center), <code class="language-plaintext highlighter-rouge">pandas</code> is currently my favorite way to work with it.</li>
  <li><code class="language-plaintext highlighter-rouge">requests</code>: This module pulls a webpage in a format to be used to feed ino <code class="language-plaintext highlighter-rouge">BeautifulSoup</code> (from a URL string with the <code class="language-plaintext highlighter-rouge">get()</code> method).</li>
  <li><code class="language-plaintext highlighter-rouge">bs4</code>, <code class="language-plaintext highlighter-rouge">BeautifulSoup</code>: The meat and potatoes that takes the output <code class="language-plaintext highlighter-rouge">requests.get()</code> and allows you to parse through it with its built-in methods.</li>
</ul>

<p>Alright, let’s put the tools to work.</p>

<h1 id="2-utilizing-beautifulsoup">2. Utilizing <code class="language-plaintext highlighter-rouge">BeautifulSoup</code></h1>
<p>Now that we have our job query going, we want to pull job postings and fill out a table row-by-row with each posting.
So let’s see how we can use <code class="language-plaintext highlighter-rouge">BeautifulSoup</code> to do that. First let’s acknowledge what tools will be using i.e., import the required modules.</p>

<h2 id="a-understanding-the-url">a. Understanding the URL</h2>
<h3 id="1-inspecting-indeeds-website">1. Inspecting Indeed’s Website</h3>
<p>Let’s just go ahead and perform a search on <a href="https://www.indeed.com">indeed</a> for a data scientist position with a minimum annual salary of, let’s say, $20,000 in Boston.</p>

<p><a href="/img/job_scraping/ss_indeed.png"><img src="/img/job_scraping/ss_indeed.png" alt="Hey, look at you searching" width="100%" /></a></p>

<p>Note the address bar after you submit the search. It should look something, if not exactly, like this:</p>

<p>` https://www.indeed.com/jobs?q=data+scientist+%2420%2C000&amp;l=Boston%2C+MA `</p>

<p>Let’s break down what and why it looks like this. Our request was to look up job postings for ‘data scientist’ with ‘$20,000’ salary in Boston, MA. Everything after the <code class="language-plaintext highlighter-rouge">jobs?q=</code> reflects just that.</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">data+scientist</code> is pretty straightforward.</li>
  <li>The next piece, <code class="language-plaintext highlighter-rouge">%24</code>, is the URL escape code for the dollar sign ($).</li>
  <li>Following that is <code class="language-plaintext highlighter-rouge">20</code> and then the escape URL code for the comma <code class="language-plaintext highlighter-rouge">%2C</code> (,).</li>
  <li>Finally, we see <code class="language-plaintext highlighter-rouge">&amp;l=</code> and <code class="language-plaintext highlighter-rouge">Boston, MA</code> afer it. This indicates an additional requirement for the query to look for job postings where the <em>location variable</em>, <code class="language-plaintext highlighter-rouge">&amp;l=</code>, is Boston, Massachusetts.</li>
</ul>

<p>Knowing this structure allows us to know how to navigate the page without having to be on it and clicking through a series of intermediate steps. Also, this will become important later in this tutorial!</p>

<p>Maybe it’s overkill, but I like to break down each component of the URL in separate variables.</p>

<!--URL_page_start = '&start=' + str(page_number)-->
<!--URL_base = 'https://www.indeed.com/jobs?q=data+scientist+%2420%2C000'-->

<h3 id="2-setting-variables">2. Setting Variables</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">city</span> <span class="o">=</span> <span class="sh">'</span><span class="s">boston</span><span class="sh">'</span>
<span class="n">job</span> <span class="o">=</span> <span class="sh">'</span><span class="s">data+scientist</span><span class="sh">'</span>
<span class="n">min_sal</span> <span class="o">=</span> <span class="sh">'</span><span class="s">%2420%2C000</span><span class="sh">'</span>

<span class="n">URL_base</span> <span class="o">=</span> <span class="sh">'</span><span class="s">https://www.indeed.com/jobs?q=</span><span class="sh">'</span> <span class="o">+</span> <span class="n">job</span> <span class="o">+</span> <span class="sh">'</span><span class="s">+</span><span class="sh">'</span> <span class="o">+</span> <span class="n">min_sal</span>
<span class="n">URL_location</span> <span class="o">=</span> <span class="sh">'</span><span class="s">&amp;l=</span><span class="sh">'</span> <span class="o">+</span> <span class="n">city</span>

<span class="n">URL</span> <span class="o">=</span> <span class="n">URL_base</span> <span class="o">+</span> <span class="n">URL_location</span> 
</code></pre></div></div>

<p>With this URL, let’s grab the results page and feed it into <code class="language-plaintext highlighter-rouge">BeautifulSoup</code>.</p>

<h3 id="3-packaging-webpage">3. Packaging Webpage</h3>

<p>First, we use <code class="language-plaintext highlighter-rouge">requests</code> to get the results page. Then we make a <code class="language-plaintext highlighter-rouge">BeautifulSoup</code> class out of the webpage request.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">page</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">URL</span><span class="p">)</span>
<span class="n">soup</span> <span class="o">=</span> <span class="nc">BeautifulSoup</span><span class="p">(</span><span class="n">page</span><span class="p">.</span><span class="n">text</span><span class="p">,</span> <span class="sh">'</span><span class="s">lxml</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div></div>

<p>The webpage is now in a nice class with useful methods that we can use to parse through and extract exactly what we want.</p>

<h2 id="b-get-entriespostings">b. Get Entries/Postings</h2>

<p>But how does it work? First, we need to know what we want so we can pinpoint what we need from <code class="language-plaintext highlighter-rouge">BeautifulSoup</code>. 
We’re going to want to eventually loop over the job postings so let’s identify what that is and see how <code class="language-plaintext highlighter-rouge">BeautifulSoup</code> can help.
Again, let’s inspect our results.</p>

<p>What will be really helpful is Chrome’s cursor tool on the top left (highlighted in blue in the image, left of ‘Elements’ and the mobile view).</p>

<p style="text-align: center"><a href="/img/job_scraping/ss_cursor.png"><img src="/img/job_scraping/ss_cursor.png" alt="Wow, you've already found the Easter Egg. Was it too easy?" width="50%" /></a></p>

<p>When you activate this tool, whatever element you hover over on the page, you’ll see the corresponding HTML that produced it. 
Taking a look, we see that when hovering over a single posting (highlighted in green and blue below), the corresponding <code class="language-plaintext highlighter-rouge">div</code> is highlighted on the right hand side 
(Yes, it sure does look like an ad but it’s not – it’s a screenshot. Dammit Google!):</p>

<p style="text-align: center"><a href="/img/job_scraping/ss_entry.png"><img src="/img/job_scraping/ss_entry.png" alt="Whroa" width="100%" /></a></p>

<p>And there’s a lot here. There’re a lot of different terms under <code class="language-plaintext highlighter-rouge">class</code>, there’s an <code class="language-plaintext highlighter-rouge">id</code>, there’s different <code class="language-plaintext highlighter-rouge">data-</code> attributes, etc. 
As you go through the different postings, you’ll see a couple different things common between all of them. 
The <code class="language-plaintext highlighter-rouge">class='row'</code> encompassed and best described the post.</p>

<p>So, using <code class="language-plaintext highlighter-rouge">BeautifulSoup</code>, we can get all of the entries on a single webpage via defining a method:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">get_entries</span><span class="p">(</span><span class="n">soup</span><span class="p">):</span>
    <span class="c1">#     entries = soup.find_all(name='div', attrs={'class':'row'}) # This way we can have a certain criteria
</span>    <span class="n">entries</span> <span class="o">=</span> <span class="n">soup</span><span class="p">.</span><span class="nf">find_all</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="sh">'</span><span class="s">div</span><span class="sh">'</span><span class="p">,</span> <span class="n">class_</span><span class="o">=</span><span class="sh">'</span><span class="s">row</span><span class="sh">'</span><span class="p">)</span> <span class="c1"># This looks cleaner
</span>    <span class="k">return</span> <span class="n">entries</span>

<span class="n">entries</span> <span class="o">=</span> <span class="nf">get_entries</span><span class="p">(</span><span class="n">soup</span><span class="p">)</span>
</code></pre></div></div>

<p>The first line in <code class="language-plaintext highlighter-rouge">get_entries()</code> is commented out but it’s another way to get the entries. It uses a dictionary of attributes to select exactly what you want, with multiple criteria. 
Instead, we use a – what I personally prefer and find simpler/cleaner – version where you explicitly state the common variables to extract what you want.</p>

<p>This returns a list of entries. At this current time, there are 18 job posting/results for a given page with pagination/links for next few pages of other postings.</p>

<h2 id="c-reading-through-a-single-posting">c. Reading Through a Single Posting</h2>

<p>For a given posting, what do we want? 
What immediately comes to mind is the company name, location, salary range, and a description/summary.</p>

<p>Look through a single job posting. There are lot of different attributes. Some obvious, some not. To start off, within the job post, there is a <code class="language-plaintext highlighter-rouge">class</code> with value <code class="language-plaintext highlighter-rouge">"title"</code>. 
This is the official job title that the company is seeking. Here are the common ones:</p>

<table align="center">
  <thead>
    <tr>
      <th>Class</th>
      <th>Description</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">title</code></td>
      <td>Job Title</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">sjcl</code></td>
      <td>Company Info</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">location</code></td>
      <td>Office Location</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">salarySnippet</code></td>
      <td>Salary Range</td>
    </tr>
    <tr>
      <td><code class="language-plaintext highlighter-rouge">summary</code></td>
      <td>Job Summary</td>
    </tr>
  </tbody>
</table>

<p>Some things to note are that the data is not pristine: The format can change from one job posting to another (<code class="language-plaintext highlighter-rouge">sjcl</code>, <code class="language-plaintext highlighter-rouge">location</code>, …) – sometimes the values aren’t even there (<code class="language-plaintext highlighter-rouge">salarySnippet</code>, <code class="language-plaintext highlighter-rouge">location</code>, …)!</p>

<h2 id="d-entry-example">d. Entry Example</h2>
<h3 id="1-getting-job-location">1. Getting Job Location</h3>
<p>Let’s go through and see how we’d use <code class="language-plaintext highlighter-rouge">BeautifulSoup</code> to get one of these values. A more complicated one that comes to mind is the job location.
For one, it’s embedded in the company info. Also, the formatting varies from posting to posting.</p>

<p>The class enclosing the location is the <code class="language-plaintext highlighter-rouge">sjcl</code>. We can get this class from an entry by using the <code class="language-plaintext highlighter-rouge">BeautifulSoup</code> element’s <code class="language-plaintext highlighter-rouge">find()</code> method. 
Within an entry, we look for the class <code class="language-plaintext highlighter-rouge">'sjcl'</code> to pull the company info. Within that, we look for the location by <code class="language-plaintext highlighter-rouge">find()</code>ing the class <code class="language-plaintext highlighter-rouge">'location'</code>.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">get_location_info</span><span class="p">(</span><span class="n">entry</span><span class="p">):</span>
    <span class="n">company_info</span> <span class="o">=</span> <span class="n">entry</span><span class="p">.</span><span class="nf">find</span><span class="p">(</span><span class="n">class_</span><span class="o">=</span><span class="sh">'</span><span class="s">sjcl</span><span class="sh">'</span><span class="p">)</span>
    <span class="n">location_info</span> <span class="o">=</span> <span class="n">company_info</span><span class="p">.</span><span class="nf">find</span><span class="p">(</span><span class="n">class_</span><span class="o">=</span><span class="sh">'</span><span class="s">location</span><span class="sh">'</span><span class="p">)</span>

    <span class="n">location</span> <span class="o">=</span> <span class="n">location_info</span><span class="p">.</span><span class="n">text</span><span class="p">.</span><span class="nf">strip</span><span class="p">()</span>
    <span class="bp">...</span>
</code></pre></div></div>

<p>Loaded into the <code class="language-plaintext highlighter-rouge">location</code> variable is everything within the HTML tags with <code class="language-plaintext highlighter-rouge">class="sjcl"</code> and also within <code class="language-plaintext highlighter-rouge">class="location"</code>.
The last line above extracts the text, not including any of the HTML, CSS, etc from the <code class="language-plaintext highlighter-rouge">text</code> member. Then we additionally use python’s <code class="language-plaintext highlighter-rouge">string</code> method <code class="language-plaintext highlighter-rouge">strip</code> to get rid of excess spaces.</p>

<p>Sometimes, the neighborhood is included. Within the <code class="language-plaintext highlighter-rouge">'location'</code>, the neighborhood, when there, is found within the <code class="language-plaintext highlighter-rouge">'span'</code> attribute.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">get_neighborhood</span><span class="p">(</span><span class="n">location_info</span><span class="p">):</span>
    <span class="n">neighborhood_info</span> <span class="o">=</span> <span class="n">location_info</span><span class="p">.</span><span class="nf">find</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="sh">'</span><span class="s">span</span><span class="sh">'</span><span class="p">)</span>
    <span class="n">neighborhood</span> <span class="o">=</span> <span class="sh">'</span><span class="s"> </span><span class="sh">'</span>
    <span class="k">if</span> <span class="n">neighborhood_info</span><span class="p">:</span>
        <span class="n">neighborhood</span> <span class="o">=</span> <span class="n">neighborhood_info</span><span class="p">.</span><span class="n">text</span>
    <span class="k">return</span> <span class="n">neighborhood</span>
</code></pre></div></div>

<p>Finishing our <code class="language-plaintext highlighter-rouge">get_location_info()</code> method, we can extract the location along with the neighborhood.
Let’s look at an example where this is applicable.</p>

<p style="text-align: center"><a href="/img/job_scraping/ss_neighborhood.png"><img src="/img/job_scraping/ss_neighborhood.png" alt="What time is it?" width="50%" /></a></p>

<p>We see on the third line of this screenshot is the location information with the neighborhood in parentheses. 
We’d like to keep the location and neighborhood as separate variables. So we redefine the location with the neighborhood stripped.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">get_location_info</span><span class="p">(</span><span class="n">entry</span><span class="p">):</span>
    <span class="bp">...</span>
    <span class="c1"># Extract neightborhood info if it's there
</span>    <span class="n">neighborhood</span> <span class="o">=</span> <span class="nf">get_neighborhood</span><span class="p">(</span><span class="n">location_info</span><span class="p">)</span>
    <span class="n">location</span> <span class="o">=</span> <span class="n">location</span><span class="p">.</span><span class="nf">rstrip</span><span class="p">(</span><span class="n">neighborhood</span><span class="p">)</span>
    <span class="n">neighborhood</span> <span class="o">=</span> <span class="n">neighborhood</span><span class="p">.</span><span class="nf">strip</span><span class="p">(</span><span class="sh">'</span><span class="s">()</span><span class="sh">'</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">location</span><span class="p">,</span> <span class="n">neighborhood</span>

<span class="n">test_job_entry</span> <span class="o">=</span> <span class="n">entries</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
<span class="n">location</span><span class="p">,</span> <span class="n">neighborhood</span> <span class="o">=</span> <span class="nf">get_location_info</span><span class="p">(</span><span class="n">test_job_entry</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="2-getting-the-job-description">2. Getting the Job Description</h3>

<p>The job summary is nice but it’s often cut much too short: there is some word or character limit. Some descriptions don’t get to the substantial part until 
a bit later so the summary is inadequate. Getting the full job description is much trickier.</p>

<p>Getting the summary is simply:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">get_job_summary</span><span class="p">(</span><span class="n">entry</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">entry</span><span class="p">.</span><span class="nf">find</span><span class="p">(</span><span class="n">class_</span><span class="o">=</span><span class="sh">'</span><span class="s">summary</span><span class="sh">'</span><span class="p">).</span><span class="n">text</span><span class="p">.</span><span class="nf">strip</span><span class="p">()</span>
</code></pre></div></div>

<p>But we can go beyond that!</p>

<p>To get the full job description, we have to click on the job posting to go to the page of the actual posting.</p>

<p>Now, note the link. It may be a nasty thing.</p>

<p><code class="language-plaintext highlighter-rouge">https://www.indeed.com/viewjob?jk=466c648cf7a22a50&amp;tk=1dkuk8nat0gc8000&amp;from=serp&amp;vjs=3&amp;advn=6613095622180756&amp;adid=77005642&amp;sjdu=teYnAu8OgCGxABCwWD3OBGSvNPsXXaEnWLrUq8268_Q7hC0YDHACZYjlfAZ2VvRY5EESrqlz1VwWF8YSqa7ebseSPxZCuEl0hMQipV1VPT6vIRhbN2jzOprwFHzzg5eqCVENzzZ9i-4GTmNHGSUnm5ZkpfgPbmXOGU2P7n50pq-C5LGpOJGmAL5Loqy_5pM1WIA2dUwXdF02ymLel9jAy22GfZafOde6nrdo-YH9JMgK4xylf_Z_R6MGkuLZCpCX</code></p>

<p>How are we going to work with this beastly thing and do it so in an automated way? Well, from our experience earlier, we saw that there’s a lot of information in the URL. 
Maybe we don’t know what all of the tokens mean but we <em>do</em> know that the variables are separated by <code class="language-plaintext highlighter-rouge">&amp;var=</code>, where <code class="language-plaintext highlighter-rouge">var</code> is some variable. What’s more, if you’ve been observant
when looking through the individual job posting from our results page, you’ll see that the value from the attribute name <code class="language-plaintext highlighter-rouge">data-jk</code> is a unique id that also appears in the URL! 
And where does it show up? It shows up after <code class="language-plaintext highlighter-rouge">viewjob?</code> and subsequently after the URL variable <code class="language-plaintext highlighter-rouge">jk=</code>.</p>

<p>Try getting rid of everything except that. What you’re left with is this:</p>

<p><code class="language-plaintext highlighter-rouge">https://www.indeed.com/viewjob?jk=466c648cf7a22a50</code></p>

<p>and gets you to the same page. I assume the rest of the URL is for tracking and statistics purposes to understand what was the most effective way to bring you to the job posting.</p>

<p>Using this information along with knowing how to extract text from a webpage, we can add in functionality to go beyond the job summary and extract the job description.</p>

<p>First, we get the unique id or link.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">get_link</span><span class="p">(</span><span class="n">entry</span><span class="p">):</span>
    <span class="n">link</span> <span class="o">=</span> <span class="n">entry</span><span class="p">[</span><span class="sh">'</span><span class="s">data-jk</span><span class="sh">'</span><span class="p">]</span>
    <span class="k">return</span> <span class="n">link</span> 

<span class="n">URL_job_desc</span> <span class="o">=</span> <span class="sh">'</span><span class="s">https://www.indeed.com/viewjob?jk=</span><span class="sh">'</span> <span class="o">+</span> <span class="nf">get_link</span><span class="p">(</span><span class="n">test_job_entry</span><span class="p">)</span>
</code></pre></div></div>

<p>Now we can use what we’ve done before to navigate to that page and pull the data that we want. Again, navigate to the page and inspect it.</p>

<p><a href="/img/job_scraping/ss_job-description.png"><img src="/img/job_scraping/ss_job-description.png" alt="Here's another one" width="100%" /></a></p>

<p>If we have the unique link, we can navigate straight to the page using <code class="language-plaintext highlighter-rouge">request.get()</code> again. This time, let’s include a pause with <code class="language-plaintext highlighter-rouge">time.sleep()</code> so that we do not 
trigger any response due to “suspicious” web traffic.</p>

<p>From my experience, the job description page is particularly messy. This is probably due to recruiters using
– likely – internal job postings with a certain format. Regardless, we can pull the text, touch it up now, and worry about the rest during the data cleaning stage. 
Just scanning a few examples, we see that many of the C escape sequences like <code class="language-plaintext highlighter-rouge">\n</code> and <code class="language-plaintext highlighter-rouge">\t</code> – a clear sign of copying and pasting the posting from different sources.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">get_job_description</span><span class="p">(</span><span class="n">job_page</span><span class="p">):</span>
    <span class="n">page</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">job_page</span><span class="p">)</span>
    <span class="n">time</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>  <span class="c1"># Ensuring at least 1 second between page grabs
</span>    <span class="n">soup</span> <span class="o">=</span> <span class="nc">BeautifulSoup</span><span class="p">(</span><span class="n">page</span><span class="p">.</span><span class="n">text</span><span class="p">,</span> <span class="sh">'</span><span class="s">lxml</span><span class="sh">'</span><span class="p">)</span>

    <span class="n">description</span> <span class="o">=</span> <span class="n">soup</span><span class="p">.</span><span class="nf">find</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="sh">'</span><span class="s">div</span><span class="sh">'</span><span class="p">,</span> <span class="n">class_</span><span class="o">=</span><span class="sh">'</span><span class="s">jobsearch-jobDescriptionText</span><span class="sh">'</span><span class="p">)</span>

    <span class="n">description</span> <span class="o">=</span> <span class="n">description</span><span class="p">.</span><span class="n">text</span><span class="p">.</span><span class="nf">strip</span><span class="p">()</span>
    <span class="n">description</span> <span class="o">=</span> <span class="n">description</span><span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="sh">'</span><span class="se">\n</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s"> </span><span class="sh">'</span><span class="p">)</span>
    <span class="n">description</span> <span class="o">=</span> <span class="n">description</span><span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="sh">'</span><span class="se">\t</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s"> </span><span class="sh">'</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">description</span>

<span class="n">description</span> <span class="o">=</span> <span class="nf">get_job_description</span><span class="p">(</span><span class="n">URL_job_desc</span><span class="p">)</span>
</code></pre></div></div>

<h3 id="3-defining-all-methods-needed">3. Defining All Methods Needed</h3>

<p>I won’t go into each of these and feel free to leave a comment if you have any questions to clear anything up. 
I mix it up between using the dictionary way to gather (<code class="language-plaintext highlighter-rouge">attr=</code>) and using variables directly (<code class="language-plaintext highlighter-rouge">class_=</code>). 
There are also some methods with <code class="language-plaintext highlighter-rouge">try:</code> and <code class="language-plaintext highlighter-rouge">except:</code>. These are used to consider entries where the variable is subject
to change. If it’s not there, returning a <code class="language-plaintext highlighter-rouge">None</code> or a <code class="language-plaintext highlighter-rouge">NaN</code> can break the entire program.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">get_job_title</span><span class="p">(</span><span class="n">entry</span><span class="p">):</span>
    <span class="n">job_title_container</span> <span class="o">=</span> <span class="n">entry</span><span class="p">.</span><span class="nf">find</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="sh">'</span><span class="s">a</span><span class="sh">'</span><span class="p">,</span> <span class="n">attrs</span><span class="o">=</span><span class="p">{</span><span class="sh">'</span><span class="s">data-tn-element</span><span class="sh">'</span><span class="p">:</span><span class="sh">'</span><span class="s">jobTitle</span><span class="sh">'</span><span class="p">})</span>
    <span class="n">job_title</span> <span class="o">=</span> <span class="n">job_title_container</span><span class="p">.</span><span class="n">text</span>
    <span class="k">return</span> <span class="n">job_title</span><span class="p">.</span><span class="nf">strip</span><span class="p">()</span>

<span class="k">def</span> <span class="nf">get_company</span><span class="p">(</span><span class="n">entry</span><span class="p">):</span>
    <span class="n">company_list</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">test_entry</span> <span class="o">=</span> <span class="n">entry</span><span class="p">.</span><span class="nf">find</span><span class="p">(</span><span class="n">class_</span><span class="o">=</span><span class="sh">'</span><span class="s">company</span><span class="sh">'</span><span class="p">)</span>
        <span class="n">company_list</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">test_entry</span><span class="p">.</span><span class="n">text</span><span class="p">.</span><span class="nf">strip</span><span class="p">())</span> 
        <span class="n">company</span> <span class="o">=</span> <span class="n">company_list</span><span class="p">.</span><span class="nf">pop</span><span class="p">()</span>
    <span class="k">except</span><span class="p">:</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">test_entry</span> <span class="o">=</span> <span class="n">entry</span><span class="p">.</span><span class="nf">find</span><span class="p">(</span><span class="n">class_</span><span class="o">=</span><span class="sh">'</span><span class="s">result-link-source</span><span class="sh">'</span><span class="p">)</span>
            <span class="n">company_list</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">test_entry</span><span class="p">.</span><span class="n">text</span><span class="p">.</span><span class="nf">strip</span><span class="p">())</span> 
            <span class="n">company</span> <span class="o">=</span> <span class="n">company_list</span><span class="p">.</span><span class="nf">pop</span><span class="p">()</span>
        <span class="k">except</span><span class="p">:</span>
            <span class="n">company</span> <span class="o">=</span> <span class="sh">'</span><span class="s"> </span><span class="sh">'</span>
    <span class="k">return</span> <span class="n">company</span>

<span class="k">def</span> <span class="nf">get_location_info</span><span class="p">(</span><span class="n">entry</span><span class="p">):</span>
    <span class="n">company_info</span> <span class="o">=</span> <span class="n">entry</span><span class="p">.</span><span class="nf">find</span><span class="p">(</span><span class="n">class_</span><span class="o">=</span><span class="sh">'</span><span class="s">sjcl</span><span class="sh">'</span><span class="p">)</span>
    <span class="n">location_info</span> <span class="o">=</span> <span class="n">company_info</span><span class="p">.</span><span class="nf">find</span><span class="p">(</span><span class="n">class_</span><span class="o">=</span><span class="sh">'</span><span class="s">location</span><span class="sh">'</span><span class="p">)</span>

    <span class="n">location</span> <span class="o">=</span> <span class="n">location_info</span><span class="p">.</span><span class="n">text</span><span class="p">.</span><span class="nf">strip</span><span class="p">()</span>

    <span class="c1"># Extract neightborhood info if it's there
</span>    <span class="n">neighborhood</span> <span class="o">=</span> <span class="nf">get_neighborhood</span><span class="p">(</span><span class="n">location_info</span><span class="p">)</span>
    <span class="n">location</span> <span class="o">=</span> <span class="n">location</span><span class="p">.</span><span class="nf">rstrip</span><span class="p">(</span><span class="n">neighborhood</span><span class="p">)</span>
    <span class="n">neighborhood</span> <span class="o">=</span> <span class="n">neighborhood</span><span class="p">.</span><span class="nf">strip</span><span class="p">(</span><span class="sh">'</span><span class="s">()</span><span class="sh">'</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">location</span><span class="p">,</span> <span class="n">neighborhood</span>


<span class="k">def</span> <span class="nf">get_neighborhood</span><span class="p">(</span><span class="n">location_info</span><span class="p">):</span>
    <span class="n">neighborhood_info</span> <span class="o">=</span> <span class="n">location_info</span><span class="p">.</span><span class="nf">find</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="sh">'</span><span class="s">span</span><span class="sh">'</span><span class="p">)</span>
    <span class="n">neighborhood</span> <span class="o">=</span> <span class="sh">'</span><span class="s"> </span><span class="sh">'</span>
    <span class="k">if</span> <span class="n">neighborhood_info</span><span class="p">:</span>
        <span class="n">neighborhood</span> <span class="o">=</span> <span class="n">neighborhood_info</span><span class="p">.</span><span class="n">text</span>
    <span class="k">return</span> <span class="n">neighborhood</span>

<span class="k">def</span> <span class="nf">get_salary</span><span class="p">(</span><span class="n">entry</span><span class="p">):</span>
    <span class="n">salary_list</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">salary</span> <span class="o">=</span> <span class="sh">''</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="n">salary_list</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">entry</span><span class="p">.</span><span class="nf">find</span><span class="p">(</span><span class="sh">'</span><span class="s">nobr</span><span class="sh">'</span><span class="p">).</span><span class="n">text</span><span class="p">.</span><span class="nf">strip</span><span class="p">())</span>
        <span class="n">salary</span> <span class="o">=</span> <span class="n">salary_list</span><span class="p">.</span><span class="nf">pop</span><span class="p">()</span>
    <span class="k">except</span><span class="p">:</span>
        <span class="k">try</span><span class="p">:</span>
            <span class="n">salary_container</span> <span class="o">=</span> <span class="n">entry</span><span class="p">.</span><span class="nf">find</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="sh">'</span><span class="s">div</span><span class="sh">'</span><span class="p">,</span> <span class="n">class_</span><span class="o">=</span><span class="sh">'</span><span class="s">salarySnippet</span><span class="sh">'</span><span class="p">)</span>
            <span class="n">salary_temp</span> <span class="o">=</span> <span class="n">salary_container</span><span class="p">.</span><span class="nf">find</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="sh">'</span><span class="s">span</span><span class="sh">'</span><span class="p">,</span> <span class="n">class_</span><span class="o">=</span><span class="sh">'</span><span class="s">salary</span><span class="sh">'</span><span class="p">)</span>
            <span class="n">salary_list</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">salary_temp</span><span class="p">.</span><span class="n">text</span><span class="p">.</span><span class="nf">strip</span><span class="p">())</span>
            <span class="n">salary</span> <span class="o">=</span> <span class="n">salary_list</span><span class="p">.</span><span class="nf">pop</span><span class="p">()</span>
        <span class="k">except</span><span class="p">:</span>
            <span class="n">salary</span> <span class="o">=</span> <span class="sh">'</span><span class="s"> </span><span class="sh">'</span>
    <span class="k">return</span> <span class="n">salary</span>

<span class="k">def</span> <span class="nf">get_job_summary</span><span class="p">(</span><span class="n">entry</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">entry</span><span class="p">.</span><span class="nf">find</span><span class="p">(</span><span class="n">class_</span><span class="o">=</span><span class="sh">'</span><span class="s">summary</span><span class="sh">'</span><span class="p">).</span><span class="n">text</span><span class="p">.</span><span class="nf">strip</span><span class="p">()</span>

<span class="k">def</span> <span class="nf">get_link</span><span class="p">(</span><span class="n">entry</span><span class="p">):</span>
    <span class="n">link</span> <span class="o">=</span> <span class="n">entry</span><span class="p">[</span><span class="sh">'</span><span class="s">data-jk</span><span class="sh">'</span><span class="p">]</span>
    <span class="k">return</span> <span class="n">link</span> 

<span class="k">def</span> <span class="nf">get_job_description</span><span class="p">(</span><span class="n">job_page</span><span class="p">):</span>
    <span class="n">page</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">job_page</span><span class="p">)</span>
    <span class="n">time</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>  <span class="c1"># Ensuring at least 1 second between page grabs
</span>    <span class="n">soup</span> <span class="o">=</span> <span class="nc">BeautifulSoup</span><span class="p">(</span><span class="n">page</span><span class="p">.</span><span class="n">text</span><span class="p">,</span> <span class="sh">'</span><span class="s">lxml</span><span class="sh">'</span><span class="p">)</span>

    <span class="n">description</span> <span class="o">=</span> <span class="n">soup</span><span class="p">.</span><span class="nf">find</span><span class="p">(</span><span class="n">name</span><span class="o">=</span><span class="sh">'</span><span class="s">div</span><span class="sh">'</span><span class="p">,</span> <span class="n">class_</span><span class="o">=</span><span class="sh">'</span><span class="s">jobsearch-jobDescriptionText</span><span class="sh">'</span><span class="p">)</span>

    <span class="n">description</span> <span class="o">=</span> <span class="n">description</span><span class="p">.</span><span class="n">text</span><span class="p">.</span><span class="nf">strip</span><span class="p">()</span>
    <span class="n">description</span> <span class="o">=</span> <span class="n">description</span><span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="sh">'</span><span class="se">\n</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s"> </span><span class="sh">'</span><span class="p">)</span>
    <span class="n">description</span> <span class="o">=</span> <span class="n">description</span><span class="p">.</span><span class="nf">replace</span><span class="p">(</span><span class="sh">'</span><span class="se">\t</span><span class="sh">'</span><span class="p">,</span><span class="sh">'</span><span class="s"> </span><span class="sh">'</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">description</span>
</code></pre></div></div>

<p>Now that we have all the methods we need to grab the relevant information, we can go ahead and make a list to loop through to extract several postings from several cities.</p>

<h1 id="3-putting-it-all-together-full-example">3. Putting it All Together (Full Example)</h1>
<h2 id="a-setting-up">a. Setting Up</h2>
<p>Again, looking at the results page, we see 18 postings per page. Since this is a variable based off indeed, let’s name the variable <code class="language-plaintext highlighter-rouge">POSTINGS_PER_PAGE</code>.
We’re looking to loop over cities we’re interested in and then loop over pages and loop over postings within the page. 
From there, we’ll construct a <code class="language-plaintext highlighter-rouge">pandas</code> dataframe with the variables that we’ll use in our machine learning and analysis stage.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">max_pages_per_city</span> <span class="o">=</span> <span class="mi">60</span>
<span class="n">POSTINGS_PER_PAGE</span> <span class="o">=</span> <span class="mi">18</span> <span class="c1"># Indeed's default 18 entries per page
</span><span class="n">postings_per_city</span> <span class="o">=</span> <span class="n">max_pages_per_city</span> <span class="o">*</span> <span class="n">POSTINGS_PER_PAGE</span> 

<span class="n">columns</span> <span class="o">=</span> <span class="p">[</span><span class="sh">'</span><span class="s">job_title</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">company_name</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">location</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">neighborhood</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">description</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">salary</span><span class="sh">'</span><span class="p">,</span> <span class="sh">'</span><span class="s">link</span><span class="sh">'</span><span class="p">]</span>
<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="nc">DataFrame</span><span class="p">(</span><span class="n">columns</span> <span class="o">=</span> <span class="n">columns</span><span class="p">)</span> 
</code></pre></div></div>
<h2 id="b-looping-over-postings">b. Looping Over Postings</h2>

<p>I’m personally only interested with job postings in and around Boston so I’ll only include that in my <code class="language-plaintext highlighter-rouge">city_set</code> but this can be extended for your own use.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">URL_base</span> <span class="o">=</span> <span class="sh">'</span><span class="s">https://www.indeed.com/jobs?q=data+scientist+%2420%2C000</span><span class="sh">'</span>
<span class="c1"># Loop over cities
</span><span class="n">city_set</span> <span class="o">=</span> <span class="p">[</span><span class="sh">'</span><span class="s">Boston</span><span class="sh">'</span><span class="p">]</span>
<span class="k">for</span> <span class="n">city_targ</span> <span class="ow">in</span> <span class="n">city_set</span><span class="p">:</span>
    <span class="n">URL_location</span> <span class="o">=</span> <span class="sh">'</span><span class="s">&amp;l=</span><span class="sh">'</span> <span class="o">+</span> <span class="n">city_targ</span>
    <span class="c1"># Loop over pages
</span>    <span class="k">for</span> <span class="n">page_number</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">postings_per_city</span><span class="p">,</span> <span class="n">POSTINGS_PER_PAGE</span><span class="p">):</span>
        <span class="n">URL_page_start</span> <span class="o">=</span> <span class="sh">'</span><span class="s">&amp;start=</span><span class="sh">'</span> <span class="o">+</span> <span class="nf">str</span><span class="p">(</span><span class="n">page_number</span><span class="p">)</span>
        <span class="n">URL</span> <span class="o">=</span> <span class="n">URL_base</span> <span class="o">+</span> <span class="n">URL_location</span> <span class="o">+</span> <span class="n">URL_page_start</span>
        <span class="n">page</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="nf">get</span><span class="p">(</span><span class="n">URL</span><span class="p">)</span>
        <span class="n">time</span><span class="p">.</span><span class="nf">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>  <span class="c1"># Ensuring at least 1 second between page grabs
</span>        <span class="n">soup</span> <span class="o">=</span> <span class="nc">BeautifulSoup</span><span class="p">(</span><span class="n">page</span><span class="p">.</span><span class="n">text</span><span class="p">,</span> <span class="sh">'</span><span class="s">lxml</span><span class="sh">'</span><span class="p">)</span>
                      
        <span class="c1"># Loop over posts/entries
</span>        <span class="n">entries</span> <span class="o">=</span> <span class="nf">get_entries</span><span class="p">(</span><span class="n">soup</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">i</span><span class="p">,</span><span class="n">entry</span> <span class="ow">in</span> <span class="nf">enumerate</span><span class="p">(</span><span class="n">entries</span><span class="p">):</span> 
            <span class="n">sys</span><span class="p">.</span><span class="n">stdout</span><span class="p">.</span><span class="nf">write</span><span class="p">(</span><span class="sh">'</span><span class="se">\r</span><span class="sh">'</span> <span class="o">+</span> <span class="sh">'</span><span class="s"> page: </span><span class="sh">'</span> <span class="o">+</span> <span class="nf">str</span><span class="p">(</span><span class="n">page_number</span><span class="o">//</span><span class="n">POSTINGS_PER_PAGE</span><span class="p">)</span> 
                                  <span class="o">+</span> <span class="sh">'</span><span class="s"> / </span><span class="sh">'</span> <span class="o">+</span> <span class="nf">str</span><span class="p">(</span><span class="n">max_pages_per_city</span><span class="p">)</span>  
                                  <span class="o">+</span> <span class="sh">'</span><span class="s">, job posting: </span><span class="sh">'</span> <span class="o">+</span> <span class="nf">str</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="o">+</span> <span class="sh">'</span><span class="s"> / </span><span class="sh">'</span> <span class="o">+</span> <span class="nf">str</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">entries</span><span class="p">))</span>
            <span class="p">)</span>        
            <span class="n">title</span> <span class="o">=</span> <span class="nf">get_job_title</span><span class="p">(</span><span class="n">entry</span><span class="p">)</span>
            <span class="n">company</span> <span class="o">=</span> <span class="nf">get_company</span><span class="p">(</span><span class="n">entry</span><span class="p">)</span>
            <span class="n">location</span><span class="p">,</span> <span class="n">neighborhood</span> <span class="o">=</span> <span class="nf">get_location_info</span><span class="p">(</span><span class="n">entry</span><span class="p">)</span>
            <span class="n">salary</span> <span class="o">=</span> <span class="nf">get_salary</span><span class="p">(</span><span class="n">entry</span><span class="p">)</span>
            <span class="n">link</span> <span class="o">=</span> <span class="nf">get_link</span><span class="p">(</span><span class="n">entry</span><span class="p">)</span>
              
            <span class="n">job_page</span> <span class="o">=</span> <span class="sh">'</span><span class="s">https://www.indeed.com/viewjob?jk=</span><span class="sh">'</span> <span class="o">+</span> <span class="n">link</span>
            <span class="n">description</span> <span class="o">=</span> <span class="nf">get_job_description</span><span class="p">(</span><span class="n">job_page</span><span class="p">)</span>
              
            <span class="c1"># Append the new row with data scraped
</span>            <span class="n">i_next</span> <span class="o">=</span> <span class="nf">len</span><span class="p">(</span><span class="n">df</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span>
            <span class="n">df</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">i_next</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="n">title</span><span class="p">,</span> <span class="n">company</span><span class="p">,</span> <span class="n">location</span><span class="p">,</span> <span class="n">neighborhood</span><span class="p">,</span> <span class="n">description</span><span class="p">,</span> <span class="n">salary</span><span class="p">,</span> <span class="n">link</span><span class="p">]</span>
              
<span class="kn">import</span> <span class="n">datetime</span>
<span class="n">date</span> <span class="o">=</span> <span class="nf">str</span><span class="p">(</span><span class="n">datetime</span><span class="p">.</span><span class="n">date</span><span class="p">.</span><span class="nf">today</span><span class="p">())</span>
  
<span class="c1"># Saving dataframe as local csv file 
</span><span class="n">df</span><span class="p">.</span><span class="nf">to_csv</span><span class="p">(</span><span class="n">date</span> <span class="o">+</span> <span class="sh">'</span><span class="s">_indeed-ds-postings.csv</span><span class="sh">'</span><span class="p">,</span> <span class="n">encoding</span><span class="o">=</span><span class="sh">'</span><span class="s">utf-8</span><span class="sh">'</span><span class="p">)</span>
</code></pre></div></div>

<p>At the very end, we save the data in a comma-separated values (CSV) format with the date to be used in the next stages.
The date is important to not overwrite your data on different days but also if there are any changes to indeed’s website formatting, 
we still have a working copy to work with for the next stages, with the present scripts.</p>

<h1 id="4-conclusion">4. Conclusion</h1>
<p>There, you have it! To review, we’ve</p>
<ul>
  <li>Used <code class="language-plaintext highlighter-rouge">requests</code> to pull webpages from its URL</li>
  <li>Seen how <code class="language-plaintext highlighter-rouge">BeautifulSoup</code> takes in the output from <code class="language-plaintext highlighter-rouge">requests.get()</code> and has built-in functions to extract elements of the page</li>
  <li>Inspected pages to see how to extract the information, once we’ve figured out what we want</li>
  <li>Inspected the URL to understand what parts are relevant and what’s fluff</li>
  <li>Got to see some data like the job description being very varied from posting to posting</li>
  <li>Used <code class="language-plaintext highlighter-rouge">pandas</code> dataframe to load in data relevant and important to us</li>
  <li>Saved the dataframe as a more universal CSV format for future stages</li>
</ul>

<p>What we’ll do in the next tutorial is clean and format the data in a more suitable format for our TFIDF, salary regression, and any other future analysis we come up with. 
Please leave a comment and provide from feedback. I know it might be a little too detailed in some areas and not enough in other areas. I can make updates to extend on them
or even answer them personally.</p>

<hr />

<h1 style="text-align: center;" id="comments">Comments!</h1>

<script src="https://kit.fontawesome.com/9d39d89011.js"></script>

<form method="POST" action="https://formspree.io/franktcao@gmail.com">
  <div class="control-group">
    <!--<div class="form-group floating-label-form-group controls">-->
    <div class="form-group">
      <span class="input-group-addon"><i class="fa fa-user fa-fw"></i></span>
      <label>Name*</label>
      <input type="text" name="Name" class="form-control" placeholder="Dave Chappelle" id="name" required="" data-validation-required-message="First and last name, please." />
      <p class="help-block text-danger"></p>
    </div>
  </div>
  <div class="control-group">
    <div class="form-group">
		<span class="input-group-addon"><i class="fa fa-envelope-o fa-fw"></i></span>
      <label>Email Address*</label>
      <input type="email" name="Email Address" class="form-control" placeholder="user@site.com" id="email" required="" data-validation-required-message="Please enter your email address." />
      <p class="help-block text-danger"></p>
    </div>
  </div>
  
  <div class="control-group">
    <div class="form-group">
      <label>Comment*</label>
      <textarea rows="5" name="Comment" class="form-control" placeholder="What I think about this post is..." id="message" required="" data-validation-required-message="Please write a comment."></textarea>
      <p class="help-block text-danger"></p>
    </div>
  </div>
  <br />
  <div id="success"></div>
  <div class="form-group">
    <center>
    <button type="submit" class="btn btn-primary" id="sendMessageButton">Send</button>
    </center>
  </div>
</form>]]></content><author><name>Frank Cao</name></author><category term="data-science" /><category term="machine-learning" /><category term="web-scraping" /><category term="tutorial" /><summary type="html"><![CDATA[Using `BeautifulSoup` and `requests` to extract job postings from indeed.com]]></summary></entry></feed>